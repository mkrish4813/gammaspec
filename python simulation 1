from pathlib import Path
from astropy import units as u
from astropy.coordinates import SkyCoord
from regions import CircleSkyRegion

# %matplotlib inline
import matplotlib.pyplot as plt
from IPython.display import display
from gammapy.data import DataStore
from gammapy.datasets import MapDataset
from gammapy.estimators import FluxPointsEstimator
from gammapy.makers import FoVBackgroundMaker, MapDatasetMaker, SafeMaskMaker
from gammapy.maps import MapAxis, WcsGeom
from gammapy.modeling import Fit
from gammapy.modeling.models import (
    FoVBackgroundModel,
    PointSpatialModel,
    PowerLawSpectralModel,
    SkyModel,
    EBLAbsorptionNormSpectralModel,
)
from gammapy.utils.check import check_tutorials_setup
from gammapy.visualization import plot_npred_signal

import numpy as np
import astropy.units as u
from astropy.coordinates import Angle, SkyCoord
from regions import CircleSkyRegion

# %matplotlib inline
import matplotlib.pyplot as plt

from IPython.display import display
from gammapy.data import FixedPointingInfo, Observation, observatory_locations
from gammapy.datasets import Datasets, SpectrumDataset, SpectrumDatasetOnOff
from gammapy.irf import load_irf_dict_from_file
from gammapy.makers import SpectrumDatasetMaker
from gammapy.maps import MapAxis, RegionGeom
from gammapy.modeling import Fit
from gammapy.modeling.models import PowerLawSpectralModel, SkyModel

from gammapy.utils.check import check_tutorials_setup

check_tutorials_setup()

# Define simulation parameters parameters 
livetime = 50 * u.h 
 
pointing_position = SkyCoord(0, 0, unit="deg", frame="galactic") 
# We want to simulate an observation pointing at a fixed position in the sky. 
# For this, we use the `FixedPointingInfo` class 
pointing = FixedPointingInfo( 
    fixed_icrs=pointing_position.icrs, 
) 
offset = 1* u.deg 
 
# Reconstructed and true energy axis 
energy_axis = MapAxis.from_edges( 
    np.logspace(-0.5, 1.0, 10), unit="TeV", name="energy", interp="log" 
) 
energy_axis_true = MapAxis.from_edges( 
    np.logspace(-1.2, 2.0, 31), unit="TeV", name="energy_true", interp="log" 
) 
on_region_radius = Angle("0.11 deg") 
 
center = pointing_position.directional_offset_by( 
    position_angle=0 * u.deg, separation=offset 
) 
on_region = CircleSkyRegion(center=center, radius=on_region_radius) 
 
# Define spectral model - a simple Power Law in this case 
model_simu = PowerLawSpectralModel( 
    index=3.0, 
    amplitude=2.5e-12 * u.Unit("cm-2 s-1 TeV-1"), 
    reference=1 * u.TeV, 
) 
# Define gamma-ray source spectrum
model_simu *= EBLAbsorptionNormSpectralModel.read_builtin(
    #'franceschini',  'dominguez', 'finke', 'franceschini17', 'saldana-lopez21'
    alpha_norm=0.9, 
    redshift=0.5 
)
print(model_simu) 
# we set the sky model used in the dataset 
model = SkyModel(spectral_model=model_simu, name="source")

irfs = load_irf_dict_from_file( 
    "$GAMMAPY_DATA/cta-1dc/caldb/data/cta/1dc/bcf/South_z20_50h/irf_file.fits" 
) 
 
location = observatory_locations["cta_south"] 
obs = Observation.create( 
    pointing=pointing, 
    livetime=livetime, 
    irfs=irfs, 
    location=location, 
) 
print(obs)

# Make the SpectrumDataset
geom = RegionGeom.create(region=on_region, axes=[energy_axis])

dataset_empty = SpectrumDataset.create(
    geom=geom, energy_axis_true=energy_axis_true, name="obs-0"
)
maker = SpectrumDatasetMaker(selection=["exposure", "edisp", "background"])

dataset = maker.run(dataset_empty, obs)

# Set the model on the dataset, and fake
dataset.models = model
dataset.fake(random_state=42)
print(dataset)

dataset_on_off = SpectrumDatasetOnOff.from_spectrum_dataset(
    dataset=dataset, acceptance=1, acceptance_off=5
)
dataset_on_off.fake(npred_background=dataset.npred_background())
print(dataset_on_off)

info_table = datasets.info_table(cumulative=True)

display(info_table)

fig, (ax_excess, ax_sqrt_ts) = plt.subplots(figsize=(10, 4), ncols=2, nrows=1)
ax_excess.plot(
    info_table["livetime"].to("h"),
    info_table["excess"],
    marker="o",
    ls="none",
)

ax_excess.set_title("Excess")
ax_excess.set_xlabel("Livetime [h]")
ax_excess.set_ylabel("Excess events")

ax_sqrt_ts.plot(
    info_table["livetime"].to("h"),
    info_table["sqrt_ts"],
    marker="o",
    ls="none",
)

ax_sqrt_ts.set_title("Sqrt(TS)")
ax_sqrt_ts.set_xlabel("Livetime [h]")
ax_sqrt_ts.set_ylabel("Sqrt(TS)")
plt.show()


